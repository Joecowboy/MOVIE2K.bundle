####################################################################################################
# Setting up imports

import inspect, os, sys
try:
	path = os.getcwd().split("?\\")[1].split('Plug-in Support')[0]+"Plug-ins\MOVIE2K.bundle\Contents\Services\URL\MOVIE2K\Modules"
except:
	path = os.getcwd().split("Plug-in Support")[0]+"Plug-ins/MOVIE2K.bundle/Contents/Services/URL/MOVIE2K/Modules"
sys.path.append(path)

try:
	import requests
except:
	import requests25 as requests

import random
import HostServices
import HostSites
import HostSitesDebug
#import HostVideoDownload
from HostServices import StripArray
from HostSites import GetMovie
from HostSitesDebug import GetMovieDebugger
#from HostVideoDownload import MyDownload

# Random User Agent
UserAgent = ['Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)', 'Opera/9.25 (Windows NT 6.0; U; ja)', 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.64 Safari/537.31', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:20.0) Gecko/20100101 Firefox/20.0', 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)', 'Mozilla/4.0 (compatible; MSIE 5.0; Windows 2000) Opera 6.01 [ja]', 'Mozilla/5.0 (Windows; U; Windows NT 5.0; ja-JP; m18) Gecko/20010131 Netscape6/6.01', 'Mozilla/5.0 (Macintosh; U; PPC Mac OS X; ja-jp) AppleWebKit/85.7 (KHTML, like Gecko) Safari/85.7']
UserAgentNum = random.randrange(0, len(UserAgent)-1, 1)

# Movie2k Plugin Version
Version = Prefs['version']

# If Video Error Enabled or Disabled
VideoError = Prefs["videoerror"]

# Set up Host Services
HostServices.R = R
HostServices.Log = Log
HostServices.HTML = HTML
HostServices.String = String
HostServices.Version = Version
HostServices.VideoError = VideoError
HostServices.UserAgent = UserAgent[UserAgentNum]
HostSites.Log = Log
HostSites.XML = XML
HostSites.HTML = HTML
HostSites.String = String
HostSites.Version = Version
HostSites.UserAgent = UserAgent[UserAgentNum]
#HostVideoDownload.Log = Log
#HostVideoDownload.UserAgent = UserAgent[UserAgentNum]

# Default Icon
ICON                 = 'icon-default.png'

# Default Movie2k URL
MOVIE2K_URL          = Prefs['movie2k_url']
SET_VIDEO_RESOLUTION = Prefs['video_resolution']


####################################################################################################
def NormalizeURL(url):

	return url


####################################################################################################
def GetItemInfo(url, itemInfo):
	Movie2k_url = url.split("?")[0]
	title = String.Unquote(url.split("title=")[1].split("&")[0], usePlus=True)
	summary = String.Unquote(url.split("summary=")[1].split("&")[0], usePlus=True)
	show = String.Unquote(url.split("show=")[1].split("&")[0], usePlus=True)
	getdate = String.Unquote(url.split("date=")[1].split("&")[0], usePlus=True)
	date = Datetime.ParseDate(getdate, "%Y")
	thumbget = String.Unquote(url.split("thumb=")[1].split("&")[0], usePlus=True)
	thumb = Callback(GetThumb, url=thumbget)
	Host = url.split("host=")[1].split("&")[0]
	source_title = "Movie2k"
	season = int(url.split("season=")[1].split("&")[0])
	index = int(url.split("index=")[1].split("&")[0])
	type = String.Unquote(url.split("type=")[1].split("&")[0], usePlus=True)
	genres = []
	genres = StripArray(arraystrings=String.Unquote(url.split("genres=")[1].split("&")[0], usePlus=True).split(','))
	content_rating = url.split("content_rating=")[1].split("&")[0]
	directors = []
	directors = StripArray(arraystrings=String.Unquote(url.split("director=")[1].split("&")[0], usePlus=True).split(','))
	guest_stars = []
	guest_stars = StripArray(arraystrings=String.Unquote(url.split("actors=")[1].split("&")[0], usePlus=True).split(','))
	rating = float(url.split("rating=")[1].split("&")[0])
	duration = url.split("duration=")[1].split("&")[0]
	if duration != "None":
		duration = int(duration)
	else:
		duration = None

	if itemInfo == "Metadata":
		if type == "TV Shows":
			obj = EpisodeObject(
					url = url,
					title = title,
					summary = summary,
					directors = directors,
					guest_stars = guest_stars,
					duration = duration,
					rating = rating,
					show = show,
					index = index,
					season = season,
					content_rating = content_rating,
					source_title = source_title,
					originally_available_at = date,
					thumb = thumb)
		else:
			obj = MovieObject(
					url = url,
					title = title,
					summary = summary,
					directors = directors,
					genres = genres,
					duration = duration,
					rating = rating,
					content_rating = content_rating,
					source_title = source_title,
					originally_available_at = date,
					thumb = thumb)

	elif itemInfo == "MediaObject":
		if Host == 'TrailerAddict':
			VideoStream_URL = []
			VideoStream_URL.append(GetMovie(Host=Host, HostPage=Movie2k_url, url=Movie2k_url, LinkType=0))
		else:
			VideoStream_URL = CheckforMultiPart(Host=Host, url=Movie2k_url, type=type)
		FileType = None
		parts = []

		if VideoStream_URL[0][3] == "rtmp":
			i = 0
			while i < len(VideoStream_URL):
				clip = VideoStream_URL[i][0]
				swfUrl = VideoStream_URL[i][1]
				rtmpurl = VideoStream_URL[i][2]
				pageUrl = VideoStream_URL[i][4]
				app = VideoStream_URL[i][5]
				live = False
				swfVfy = True
				parts.append(PartObject(key=RTMPVideoURL(url=rtmpurl, clip=clip, app=app, subscribe=clip, swfUrl=swfUrl, swfVfy=swfVfy, pageUrl=pageUrl, args=[False, clip], live=live)))
				Log(VideoStream_URL[i])
				i += 1

			video_frame_rate = "30"
			video_resolution = SET_VIDEO_RESOLUTION
			protocols = Protocol.RTMP
			container = Container.MP4
			video_codec = VideoCodec.H264
			audio_codec = AudioCodec.AAC
			bitrate = None
			audio_channels = 2
			optimized_for_streaming = True

		else:
			i = 0
			while i < len(VideoStream_URL):
				parts.append(PartObject(key=Callback(PlayVideo, url=VideoStream_URL[i])))
				try:
					video_url = VideoStream_URL[i].split("?cookies=")[0]
				except:
					video_url = VideoStream_URL[i]

				if video_url.endswith('.mp4') or video_url.endswith('.mp4?start=0'):
					video_frame_rate = "30"
					video_resolution = SET_VIDEO_RESOLUTION
					protocols = None
					container = Container.MP4
					video_codec = VideoCodec.H264
					audio_codec = AudioCodec.AAC
					audio_channels = 2
					bitrate = None
					optimized_for_streaming = True
				elif video_url.endswith('.flv') or video_url.endswith('.flv?start=0'):
					video_frame_rate = "30"
					video_resolution = SET_VIDEO_RESOLUTION
					protocols = None
					container = Container.FLV
					video_codec = VideoCodec.VP6
					audio_codec = AudioCodec.MP3
					bitrate = None
					audio_channels = 2
					optimized_for_streaming = True
				else:
					video_frame_rate = "30"
					video_resolution = SET_VIDEO_RESOLUTION
					protocols = None
					container = None
					video_codec = None
					audio_codec = None
					bitrate = None
					audio_channels = 2
					optimized_for_streaming = True
				
				#MyDownload(title=title, VideoStreamLink=video_url)
				Log("Part"+str(i)+": "+video_url)
				i += 1

		obj = [MediaObject(
				parts = parts,
				video_frame_rate = video_frame_rate,
				video_resolution = video_resolution,
				protocols = protocols,
				container = container,
				video_codec = video_codec,
				audio_codec = audio_codec,
				bitrate = bitrate,
				duration = duration,
				audio_channels = audio_channels,
				optimized_for_streaming = optimized_for_streaming)]

	return obj


###################################################################################################
def MetadataObjectForURL(url):

	return GetItemInfo(url,'Metadata')


###################################################################################################
def MediaObjectsForURL(url):

	return GetItemInfo(url,'MediaObject')


####################################################################################################
def GetThumb(url, GetUserAgent=None, cookies={}):

	try:
		imgData = HTTP.Request(url, cacheTime=CACHE_1HOUR).content
		return DataObject(imgData, 'image/jpeg')
	except:
		return Redirect(R(ICON))


###################################################################################################
@indirect
def PlayVideo(url):
	import ast
	oc = ObjectContainer()

	try:
		video_url = url.split("?cookies=")[0]
		http_cookies = String.Unquote(url.split("cookies=")[1].split("&")[0], usePlus=True).replace('{', '').replace('}', '').replace("'", "").replace(': ', '=').replace(',', ';')
		http_headers = ast.literal_eval(String.Unquote(url.split("headers=")[1], usePlus=True))
		#user_agent = UserAgent[UserAgentNum]
	except:
		video_url = url
		http_cookies = ""
		http_headers = {'User-Agent': UserAgent[UserAgentNum]}
		#user_agent = UserAgent[UserAgentNum]
	
	#video_url = R("Prisoners_1384394037.51.flv")
	oc.http_headers = http_headers
	oc.http_cookies = http_cookies
	#oc.user_agent = user_agent
	oc.add(VideoClipObject(
		items = [
				MediaObject(
					parts = [PartObject(key=video_url)]
				)
        		]
	))

	return oc


####################################################################################################
def CheckforMultiPart(Host, url, type):
	VideoStream = []

	session = requests.session()
	headers = {'User-Agent': UserAgent[UserAgentNum]}
	req = session.get(url, headers=headers)
	HostPageInfo = HTML.ElementFromString(req.content)

	CURRENT_MOVIE2K_URL = url.split('/')[2]

	if CURRENT_MOVIE2K_URL == "www.movie2k.tl" and type != "TV Shows":
		i = 1
		jj = 1
		PartNext = HostPageInfo.xpath('//div[@id="maincontent5"]/div')
	else:
		i = 3
		jj = 3
		PartNext = HostPageInfo.xpath('//div[@id="maincontent5"]/div/div')

	while i < len(PartNext):
		if PartNext[i].get('id') != "underplayer" and PartNext[i].get('id') != "emptydiv":
			PartNext_Info = PartNext[i].xpath('./a')[0].get('href')
			PartNext_Link = "http://" + MOVIE2K_URL + "/"+PartNext_Info
			VideoStream.append(GetHostPage(Host=Host, url=PartNext_Link))
			i += 1
		else:
			if i == jj:
				Log("No MultiPart videos on Page")
				VideoStream.append(GetHostPage(Host=Host, url=url))
			i = len(PartNext)
	
	return VideoStream


####################################################################################################
def GetHostPage(Host, url):

	if EnableHostTesting():
		CkHost, CkHostURL, CkMovie2kURL, CKLinkType =  HostOverride()
		if CkHost != None and CkMovie2kURL != None:
			Host = CkHost.capitalize()
			url = CkMovie2kURL

	session = requests.session()
	headers = {'User-Agent': UserAgent[UserAgentNum]}
	req = session.get(url, headers=headers)
	HostPageInfo = HTML.ElementFromString(req.content)

	try:
		try:
			HostPageElm = HostPageInfo.xpath('//div[@id="maincontent5"]/div')[0]
			HostPage = HostPageElm.xpath('./iframe')[0].get('src')
			LinkType = 1
		except:
			HostPageElm = HostPageInfo.xpath('//div[@id="maincontent5"]/div')[0]
			HostPage = HostPageElm.xpath('./embed')[0].get('src')
			LinkType = 2
	except:
		try:
			HostPage = HostPageInfo.xpath('//div[@id="emptydiv"]//script')[0].get('src')
			LinkType = 3	
		except:
			try:
				HostPageElm = HostPageInfo.xpath('//div[@id="maincontent5"]/div')[0]
				try:
					HostPage = HostPageElm.xpath('./a')[0].get('href')
				except:
					HostPage = HostPageElm.xpath('./div[@id="emptydiv"]/a')[0].get('href')
				LinkType = 4
			except:
				HostPage = None
				LinkType = 0

	if EnableHostTesting():
		if CkHost != None and CkHostURL != None:
			Host = CkHost.capitalize()
			HostPage = CkHostURL
			LinkType = int(CKLinkType)
		Log("Testing Host: "+Host)
		Log("Testing HostPage: "+HostPage)
		Log("Testing Movie2k URL: "+url)
		Log("Testing Link Type: "+str(LinkType))

	VideoStream = GetMovie(Host=Host, HostPage=HostPage, url=url, LinkType=LinkType)

	return VideoStream


####################################################################################################
def EnableHostTesting():
	HostDebug = Prefs["experimental"]

	if HostDebug == "Enabled":
		HostDebug = True
	else:
		HostDebug = False

	return HostDebug


####################################################################################################
def HostOverride():
	Host = Prefs["hostoverride"]
	HostURL = Prefs["hosturl"]
	Movie2kURL = Prefs["movie2kurl"]
	LinkType = Prefs["linktype"]

	return Host, HostURL, Movie2kURL, LinkType